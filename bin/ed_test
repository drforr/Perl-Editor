#!/usr/bin/perl

use warnings;
use strict;
use Carp qw(croak);
use Readonly;

use FindBin qw($Bin);
use lib qq{$Bin/../lib};
use Curses;
use POE;
use POE::Wheel::Curses;

use Pane;
use Pane::Edit;
use Pane::CommandLine;

#
# Available modes:
#
# Normal
# Visual
# Insert
# Command-line
#
my %editor_key;
my %inline_state;

# {{{ Keystroke({ trie => $trie, type => $type, sub => $sub })
sub Keystroke
  {
  my ( $args ) = @_;
  my $trie     = $args->{trie};
  my $type     = $args->{type};

  $trie = [ $trie ] unless ref $trie;

  for my $key ( @$trie )
    {
    $editor_key{$type}{$key} = $args->{sub};
    }
  }

# }}}

# {{{ State({ name => $name, sub => $sub })
sub State
  {
  my ( $args ) = @_;
  my $name     = $args->{name};
  my $sub      = $args->{sub};

  $inline_state{$name} = sub
    {
    $sub->
      ({
      kernel => $_[KERNEL],
      heap   => $_[HEAP],
      args   => [ @_[ ARG0 .. $#_ ] ],
      });
    };
  }

# }}}

# {{{ Normal-mode keystrokes

# nul soh stx etx eot enq ack bel
# bs  ht

# nl => 'j'
# vt => 'j'

# {{{ Normal-mode np (\cL)
Keystroke
  ({
  trie => qq{\cL},
  type => q{normal},
  sub => sub
    {
    my ( $args ) = @_;
    my $kernel   = $args->{kernel};
 
    $kernel->yield(q{update});
    }
  });

# }}}

# cr => 'j'

# so  si

# dle => 'k'

# dc1 dc2 dc3 dc4 nak syn etb
# can em  sub esc fs  gs  rs  us

# sp => 'l'

#  !   "   # 

# {{{ Normal-mode '$', KEY_EOL
Keystroke
  ({
  trie => [ q{KEY_EOL}, q{$} ],
  type => q{normal},
  sub => sub
    {
    my ( $args ) = @_;
    my $pane     = $args->{heap}->{pane};
 
    $pane->cursor_end_line();
    }
  });

# }}}

# %  &  '
# (  )  *

# '+' => 'j'

# ,

# '-' => 'k'

# .  /

# {{{ Normal-mode '0', KEY_BEG
Keystroke
  ({
  trie => [ q{KEY_BEG}, q{0} ],
  type => q{normal},
  sub => sub
    {
    my ( $args ) = @_;
    my $pane     = $args->{heap}->{pane};
 
    $pane->cursor_flush_left();
    }
  });

# }}}

# 1  2  3  4  5  6  7
# 8  9

# {{{ Normal-mode ':'
Keystroke
  ({
  trie => q{:},
  type => q{normal},
  sub => sub
    {
    my ( $args )     = @_;
    my $pane         = $args->{heap}->{pane};
    my $command_line = $args->{heap}->{command_line};
 
    $pane->set_mode({ mode => q{command} });
    $command_line->set_mode({ mode => q{command} });
    }
  });

# }}}

# ;  <  =  >  ?
# @

# {{{ Normal-mode 'A'
Keystroke
  ({
  trie => q{A},
  type => q{normal},
  sub => sub
    {
    my ( $args )     = @_;
    my $pane         = $args->{heap}->{pane};
    my $command_line = $args->{heap}->{command_line};
 
    $pane->set_mode({ mode => q{insert} });
    $command_line->set_mode({ mode => q{insert} });
    $pane->cursor_flush_right;
    }
  });

# }}}

# B  C  D  E  F

# {{{ Normal-mode 'G', KEY_END
Keystroke
  ({
  trie => [ q{KEY_END}, q{G} ],
  type => q{normal},
  sub => sub
    {
    my ( $args ) = @_;
    my $pane     = $args->{heap}->{pane};
 
    $pane->cursor_flush_bottom();
    }
  });

# }}}

# {{{ Normal-mode 'H'
Keystroke
  ({
  trie => q{H},
  type => q{normal},
  sub => sub
    {
    my ( $args ) = @_;
    my $pane     = $args->{heap}->{pane};
 
    $pane->cursor_viewport_top;
    }
  });

# }}}

# {{{ Normal-mode 'I'
Keystroke
  ({
  trie => q{I},
  type => q{normal},
  sub => sub
    {
    my ( $args )     = @_;
    my $pane         = $args->{heap}->{pane};
    my $command_line = $args->{heap}->{command_line};
 
    $pane->set_mode({ mode => q{insert} });
    $command_line->set_mode({ mode => q{insert} });
    $pane->cursor_flush_left;
    }
  });

# }}}

# J  K

# {{{ Normal-mode 'L'
Keystroke
  ({
  trie => q{L},
  type => q{normal},
  sub => sub
    {
    my ( $args ) = @_;
    my $pane     = $args->{heap}->{pane};
 
    $pane->cursor_viewport_bottom;
    }
  });

# }}}

# {{{ Normal-mode 'M'
Keystroke
  ({
  trie => q{M},
  type => q{normal},
  sub => sub
    {
    my ( $args ) = @_;
    my $pane     = $args->{heap}->{pane};
 
    $pane->cursor_viewport_vertical_center;
    }
  });

# }}}

# N

# {{{ Normal-mode 'O'
Keystroke
  ({
  trie => q{O},
  type => q{normal},
  sub => sub
    {
    my ( $args )     = @_;
    my $pane         = $args->{heap}->{pane};
    my $command_line = $args->{heap}->{command_line};
    
    $pane->set_mode({ mode => q{insert} });
    $command_line->set_mode({ mode => q{insert} });
    $pane->insert_line;
    }
  });

# }}}

# P  Q  R  S  T  U  V  W
# X  Y  Z  [  \  ]

# {{{ Normal-mode '^'
Keystroke
  ({
  trie => q{^},
  type => q{normal},
  sub => sub
    {
    my ( $args ) = @_;
    my $pane     = $args->{heap}->{pane};
 
    $pane->cursor_beginning_line();
    }
  });

# }}}

# _

# `

# {{{ Normal-mode 'a'
Keystroke
  ({
  trie => q{a},
  type => q{normal},
  sub => sub
    {
    my ( $args )     = @_;
    my $pane         = $args->{heap}->{pane};
    my $command_line = $args->{heap}->{command_line};
 
    $pane->set_mode({ mode => q{insert} });
    $command_line->set_mode({ mode => q{insert} });
    $pane->cursor_right;
    }
  });

# }}}

# b  c  d  e  f  g

# {{{ Normal-mode 'h', KEY_LEFT
Keystroke
  ({
  trie => [ q{KEY_LEFT}, q{h} ],
  type => q{normal},
  sub => sub
    {
    my ( $args ) = @_;
    my $pane     = $args->{heap}->{pane};

    $pane->cursor_left();
    }
  });

# }}}

# {{{ Normal-mode 'i'
Keystroke
  ({
  trie => q{i},
  type => q{normal},
  sub => sub
    {
    my ( $args )     = @_;
    my $pane         = $args->{heap}->{pane};
    my $command_line = $args->{heap}->{command_line};
 
    $pane->set_mode({ mode => q{insert} });
    $command_line->set_mode({ mode => q{insert} });
    }
  });

# }}}

# {{{ Normal-mode 'j', '+', cr, KEY_DOWN, nl (\cJ)
Keystroke
  ({
  trie => [ q{KEY_DOWN}, qq{\cM}, q{j}, q{+}, qq{\cJ}, qq{\ck} ],
  type => q{normal},
  sub => sub
    {
    my ( $args ) = @_;
    my $pane     = $args->{heap}->{pane};
 
    $pane->cursor_down();
    }
  });

# }}}

# {{{ Normal-mode 'k','-', KEY_UP, dle (\cP)
Keystroke
  ({
  trie => [ q{KEY_UP}, q{-}, q{k}, qq{\cP} ],
  type => q{normal},
  sub => sub
    {
    my ( $args ) = @_;
    my $pane     = $args->{heap}->{pane};
 
    $pane->cursor_up();
    }
  });

# }}}

# {{{ Normal-mode 'l', ' ', KEY_RIGHT
Keystroke
  ({
  trie => [ q{KEY_RIGHT},q{l},q{ } ],
  type => q{normal},
  sub => sub
    {
    my ( $args ) = @_;
    my $pane     = $args->{heap}->{pane};
 
    $pane->cursor_right();
    }
  });

# }}}

# m  n

# {{{ Normal-mode 'o'
Keystroke
  ({
  trie => q{o},
  type => q{normal},
  sub => sub
    {
    my ( $args )     = @_;
    my $pane         = $args->{heap}->{pane};
    my $command_line = $args->{heap}->{command_line};
 
    $pane->set_mode({ mode => q{insert} });
    $command_line->set_mode({ mode => q{insert} });
    $pane->insert_line;
    $pane->cursor_down;
    }
  });

# }}}

# p  q  r  s  t

# {{{ Normal-mode 'u'
Keystroke
  ({
  trie => q{u},
  type => q{normal},
  sub => sub
    {
    my ( $args ) = @_;
    my $pane     = $args->{heap}->{pane};
 
    $pane->undo;
    }
  });

# }}}

# v  w

# {{{ Normal-mode 'x'
Keystroke
  ({
  trie => q{x},
  type => q{normal},
  sub => sub
    {
    my ( $args ) = @_;
    my $pane     = $args->{heap}->{pane};

    $pane->delete_character;
    }
  });

# }}}

# y  z  {

# {{{ Normal-mode '|'
Keystroke
  ({
  trie => q{|},
  type => q{normal},
  sub => sub
    {
    my ( $args ) = @_;
    my $pane     = $args->{heap}->{pane};
 
    $pane->cursor_flush_left();
    }
  });

# }}}

# }

# {{{ Normal-mode '~'
Keystroke
  ({
  trie => q{~},
  type => q{normal},
  sub => sub
    {
    my ( $args ) = @_;
    my $pane     = $args->{heap}->{pane};
 
    $pane->swap_case;
    $pane->cursor_right;
    }
  });

# }}}

# {{{ Normal-mode del, KEY_BACKSPACE
Keystroke
  ({
  trie => q{KEY_BACKSPACE},
  type => q{normal},
  sub => sub
    {
    my ( $args ) = @_;
    my $pane     = $args->{heap}->{pane};

    $pane->cursor_left;
    }
  });

# }}}

# {{{ Normal-mode KEY_HOME
Keystroke
  ({
  trie => q{KEY_HOME},
  type => q{normal},
  sub => sub
    {
    my ( $args ) = @_;
    my $pane     = $args->{heap}->{pane};
 
    $pane->cursor_flush_top();
    }
  });

# }}}

# }}}

# {{{ Insert keystrokes

# nul  soh  stx  etx  eot  enq  ack  bel
# bs   ht   nl   vt   np   cr   so   si
# dle  dc1  dc2  dc3  dc4  nak  syn  etb
# can  em   sub  

# {{{ Insert-mode '\e' (esc)
Keystroke
  ({
  trie => qq{\e},
  type => q{insert},
  sub => sub
    {
    my ( $args )     = @_;
    my $pane         = $args->{heap}->{pane};
    my $command_line = $args->{heap}->{command_line};
 
    $pane->set_mode({ mode => q{normal} });
    $command_line->set_mode({ mode => q{normal} });
    }
  });

# }}}

# fs   gs   rs   us

# {{{ Insert-mode [...]
Keystroke
  ({
  trie =>
    [
    q{ }, q{!}, q{"}, q{#}, q{$},  q{%}, q{&}, q{'},
    q{(}, q{)}, q{*}, q{+}, q{,},  q{-}, q{.}, q{/},
    q{0}, q{1}, q{2}, q{3}, q{4},  q{5}, q{6}, q{7},
    q{8}, q{9}, q{:}, q{;}, q{<},  q{=}, q{>}, q{?},
    q{@}, q{A}, q{B}, q{C}, q{D},  q{E}, q{F}, q{G},
    q{H}, q{I}, q{J}, q{K}, q{L},  q{M}, q{N}, q{O},
    q{P}, q{Q}, q{R}, q{S}, q{T},  q{U}, q{V}, q{W},
    q{X}, q{Y}, q{Z}, q{[}, q{\\}, q{]}, q{^}, q{_},
    q{`}, q{a}, q{b}, q{c}, q{d},  q{e}, q{f}, q{g},
    q{h}, q{i}, q{j}, q{k}, q{l},  q{m}, q{n}, q{o},
    q{p}, q{q}, q{r}, q{s}, q{t},  q{u}, q{v}, q{w},
    q{x}, q{y}, q{z}, q({), q{|},  q(}), q{~},
    ],
  type => q{insert},
  sub => sub
    {
    my ( $args, $keystroke ) = @_;
    my $pane                 = $args->{heap}->{pane};
 
    $pane->insert_character({ keystroke => $keystroke });
    $pane->cursor_right;
    }
  });

# }}}

# {{{ Insert-mode del (KEY_BACKSPACE)
Keystroke
  ({
  trie => q{KEY_BACKSPACE},
  type => q{insert},
  sub => sub
    {
    my ( $args ) = @_;
    my $pane     = $args->{heap}->{pane};
 
    $pane->cursor_left;
    $pane->delete_character;
    }
  });

# }}}

# }}}

# {{{ Command keystrokes

# {{{ Command-mode del, KEY_BACKSPACE
Keystroke
  ({
  trie => q{KEY_BACKSPACE},
  type => q{command},
  sub => sub
    {
    my ( $args )     = @_;
    my $pane         = $args->{heap}->{pane};
    my $command_line = $args->{heap}->{command_line};

    $command_line->delete_command_character;
    }
  });

# }}}

# nul  soh  stx  etx  eot  enq  ack  bel
# bs   ht   nl   vt   np

# {{{ Command-mode '\cM' (cr)
Keystroke
  ({
  trie => qq{\cM},
  type => q{command},
  sub => sub
    {
    my ( $args )     = @_;
    my $kernel       = $args->{kernel};
    my $pane         = $args->{heap}->{pane};
    my $command_line = $args->{heap}->{command_line};
 
    $pane->set_mode({ mode => q{normal} });
    $command_line->set_mode({ mode => q{normal} });

    my $command = $command_line->{content}[-1];
    $command_line->{content} = [''];

    if ( $command eq q{q} )
      {
      $args->{heap}->{quitting} = 1; # XXX Think about this...
      $kernel->yield(q{quit});
      }
    }
  });

# }}}

# so   si
# dle  dc1  dc2  dc3  dc4  nak  syn  etb
# can  em   sub

# {{{ Command-mode '\e' (esc)
Keystroke
  ({
  trie => qq{\e},
  type => q{command},
  sub => sub
    {
    my ( $args )     = @_;
    my $pane         = $args->{heap}->{pane};
    my $command_line = $args->{heap}->{command_line};

    $pane->{content} = [''];
 
    $pane->set_mode({ mode => q{normal} });
    $command_line->set_mode({ mode => q{normal} });
    }
  });

# }}}

# fs   gs   rs   us

# {{{ Command-mode [...]
Keystroke
  ({
  trie =>
    [
    q{ }, q{!}, q{"}, q{#}, q{$},  q{%}, q{&}, q{'},
    q{(}, q{)}, q{*}, q{+}, q{,},  q{-}, q{.}, q{/},
    q{0}, q{1}, q{2}, q{3}, q{4},  q{5}, q{6}, q{7},
    q{8}, q{9}, q{:}, q{;}, q{<},  q{=}, q{>}, q{?},
    q{@}, q{A}, q{B}, q{C}, q{D},  q{E}, q{F}, q{G},
    q{H}, q{I}, q{J}, q{K}, q{L},  q{M}, q{N}, q{O},
    q{P}, q{Q}, q{R}, q{S}, q{T},  q{U}, q{V}, q{W},
    q{X}, q{Y}, q{Z}, q{[}, q{\\}, q{]}, q{^}, q{_},
    q{`}, q{a}, q{b}, q{c}, q{d},  q{e}, q{f}, q{g},
    q{h}, q{i}, q{j}, q{k}, q{l},  q{m}, q{n}, q{o},
    q{p}, q{q}, q{r}, q{s}, q{t},  q{u}, q{v}, q{w},
    q{x}, q{y}, q{z}, q({), q{|},  q(}), q{~},
    ],
  type => q{command},
  sub => sub
    {
    my ( $args, $keystroke ) = @_;
    my $pane                 = $args->{heap}->{pane};
    my $command_line         = $args->{heap}->{command_line};
 
    $command_line->insert_command_character({ keystroke => $keystroke });
    }
  });

# }}}

# }}}

# {{{ get_lines({ filename => $filename })
sub get_lines
  {
  my ( $args ) = @_;
  my $filename = $args->{filename};
  my $lines    = [];

  croak qq{Could not find file '$filename'.} unless -e $filename;
  croak qq{'$filename' is not a file.} unless -f $filename;
  
  open my $fh, $filename or die qq{Could not open '$filename'};
  @$lines = map { chomp; $_ } <$fh>;
  close $fh;
  return $lines;
  }

# }}}

# {{{ Event handlers

# {{{ console_initialize
#
# Initialize the console interface.
#
State
  ({
  name => q{_start},
  sub  => sub 
    {
    my ( $args ) = @_;
    my $kernel   = $args->{kernel};
    my $heap     = $args->{heap};
    my $filename = $args->{args}[0];

    $heap->{curses} = POE::Wheel::Curses->new( InputEvent => q{got_input} );

# {{{ Collect the longest string
    my $file       = get_lines({ filename => $filename });
    my $pane_width = length($file->[0]);
    for my $line_len ( map { length($_) } @$file )
      {
      $pane_width = $line_len if $line_len > $pane_width;
      }

# }}}

# {{{ Create scrolling pane
    $heap->{pane} = Pane::Edit->new
      ({
      pane_height     => scalar(@$file),
      viewport_height => $Curses::LINES - 1,
      pane_width      => $pane_width,
      viewport_width  => $Curses::COLS,
      content         => $file,
      });

# }}}

# {{{ Create command pane
    $heap->{command_line} = Pane::CommandLine->new
      ({
      pane_height     => 1,
      viewport_height => 1,
      pane_width      => $Curses::COLS,
      viewport_width  => $Curses::COLS,
      content         => [''],
      });

# }}}

    $kernel->yield(q{update});
    }
  });

# }}}

# {{{ curses_refresh
#
# Refresh the entire screen
#
State
  ({
  name => q{update},
  sub  => sub
    {
    my ( $args )     = @_;
    my $pane         = $args->{heap}->{pane};
    my $command_line = $args->{heap}->{command_line};
 
    $pane->update;
    $command_line->update;
    }
  });

# }}}

# {{{ console_quit
#
# Print the closing text
# Destroy the heap items we allocated
#
State
  ({
  name => q{quit},
  sub  => sub
    {
    my ( $args ) = @_;
    my $kernel   = $args->{kernel};
    my $heap     = $args->{heap};
    my $row      = $Curses::LINES - 2;
 
    move( $row++, 0 ); clrtoeol(); addstr(qq{Editor has quit.});
    move( $row++, 0 ); clrtoeol();
    noutrefresh();
    doupdate;
 
    $kernel->alias_remove(q{console});
    $kernel->alarm_remove_all();
    delete $heap->{curses};
    }
  });

# }}}

# {{{ curses_input
#
# Perform editor actions for keystrokes
#
State
  ({
  name => q{got_input},
  sub  => sub
    {
    my ( $args )  = @_;
    my $kernel    = $args->{kernel};
    my $keystroke = $args->{args}[0];
    my $mode      = $args->{heap}{command_line}{mode};

    $keystroke = uc( keyname($keystroke) ) if
      $keystroke =~ m{ ^ \d{2,} $ }x;

    for my $ed_mode ( $mode, q{default} )
      {
      next unless $editor_key{$ed_mode}{$keystroke};
      $editor_key{$ed_mode}{$keystroke}->($args,$keystroke);
      last;
      }
    $kernel->yield(q{update}) unless $args->{heap}->{quitting};
    }
  });

# }}}

# }}}

POE::Session->create
  (
  args          => [ $ARGV[0] ],
  inline_states => { %inline_state },
  );
POE::Kernel->run();
exit 0;
