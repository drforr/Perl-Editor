#!/usr/bin/perl

use warnings;
use strict;
use Carp qw(croak);
use List::Util qw(max);

use FindBin qw($Bin);
use lib qq{$Bin/../lib};
use Curses;
use POE;
use POE::Wheel::Curses;

use Packer;

use Pane;
use Pane::Edit;
use Pane::StatusLine;
use Pane::CommandLine;

#
# Available modes:
#
# Normal
# Visual
# Insert
# Command-line
#
my @legal_modes = qw( normal insert command visual );
my %inline_state;
my %editor_trie;
$editor_trie{$_} = {} for @legal_modes;

# {{{ insert_into_trie({ string => 'dl', mode => 'normal', sub => $fref })
sub insert_into_trie
  {
  my ( $args ) = @_;
  die "Mode '$args->{mode}' is not valid.\n"
    unless $editor_trie{$args->{mode}};
  my $list     = $args->{string};
  my $mode     = $args->{mode};
  my $tref     = $editor_trie{$mode};

  $list = [ $list ] unless ref($list);

  for my $string ( @$list )
    {
    my $key;
    if ( $string =~ m{ ^ KEY }mx )
      {
      $key = $string;
      }
    else 
      {
      my @char = split //, $string;
      while ( @char > 1 )
        {
        my $char = shift @char;
        $tref->{$char} = {}
          unless defined $tref->{$char};
        $tref = $tref->{$char};
        }
      $key = $char[0];
      }
    if ( $tref->{$key} )
      {
      endwin;
      die "Cannot insert two actions for '$string' in mode '$mode'.\n";
      }
    $tref->{$key} = $args->{sub};
    }
  }

# }}}

# {{{ User commands

# {{{ Normal-mode commands

# nul soh stx etx eot enq ack bel
# bs  ht

# nl => 'j'
# vt => 'j'

# {{{ Normal-mode np (\cL)
insert_into_trie
  ({
  string => qq{\cL},
  mode   => q{normal},
  sub    => sub
    {
    my ( $args ) = @_;
    $args->{kernel}->yield(q{update});
    }
  });

# }}}

# cr => 'j'

# so  si

# dle => 'k'

# dc1 dc2 dc3 dc4 nak syn etb
# can em  sub esc fs  gs  rs  us

# sp => 'l'

#  !   "   # 

# {{{ Normal-mode '$', KEY_EOL
insert_into_trie
  ({
  string => [ q{KEY_EOL}, q{$} ],
  mode   => q{normal},
  sub    => sub
    {
    my ( $args ) = @_;
    $args->{heap}->{pane}->cursor_end_line;
    }
  });

# }}}

# %  &  '
# (  )  *

# '+' => 'j'

# ,

# '-' => 'k'

# .  /

# {{{ Normal-mode '0', KEY_BEG
insert_into_trie
  ({
  string => [ q{KEY_BEG}, q{0} ],
  mode   => q{normal},
  sub    => sub
    {
    my ( $args ) = @_;
    $args->{heap}->{pane}->cursor_flush_left;
    }
  });

# }}}

# {{{ Normal-mode '1'..'9'
insert_into_trie
  ({
  string => [ q{1}, q{2}, q{3}, q{4}, q{5}, q{6}, q{7}, q{8}, q{9} ],
  mode   => q{normal},
  sub    => sub
    {
    my ( $args, $keystroke ) = @_;
    my $heap                 = $args->{heap};

    $keystroke += 0;
    if ( $heap->{repeat_count} and $heap->{repeat_count} > 0 )
      {
      $heap->{repeat_count} = ( $heap->{repeat_count} * 10 ) + $keystroke;
      }
    else
      {
      $heap->{repeat_count} = $keystroke;
      }
    }
  });

# }}}

# {{{ Normal-mode ':'
insert_into_trie
  ({
  string => q{:},
  mode   => q{normal},
  sub    => sub
    {
    my ( $args ) = @_;
    set_mode({ heap => $args->{heap}, mode => q{command} });
    }
  });

# }}}

# ;  <  =  >  ?
# @

# {{{ Normal-mode 'A'
insert_into_trie
  ({
  string => q{A},
  mode   => q{normal},
  sub    => sub
    {
    my ( $args ) = @_;
    my $pane     = $args->{heap}->{pane};

    set_mode({ heap => $args->{heap}, mode => q{insert} });
    $pane->cursor_flush_right;
    }
  });

# }}}

# B  C  D  E  F

# {{{ Normal-mode 'G', KEY_END
insert_into_trie
  ({
  string => [ q{KEY_END}, q{G} ],
  mode   => q{normal},
  sub    => sub
    {
    my ( $args ) = @_;
    $args->{heap}->{pane}->cursor_flush_bottom;
    }
  });

# }}}

# {{{ Normal-mode 'H'
insert_into_trie
  ({
  string => q{H},
  mode   => q{normal},
  sub    => sub
    {
    my ( $args ) = @_;
    $args->{heap}->{pane}->cursor_viewport_top;
    }
  });

# }}}

# {{{ Normal-mode 'I'
insert_into_trie
  ({
  string => q{I},
  mode   => q{normal},
  sub    => sub
    {
    my ( $args ) = @_;
    my $pane     = $args->{heap}->{pane};

    set_mode({ heap => $args->{heap}, mode => q{insert} });
    $pane->cursor_flush_left;
    }
  });

# }}}

# J  K

# {{{ Normal-mode 'L'
insert_into_trie
  ({
  string => q{L},
  mode   => q{normal},
  sub    => sub
    {
    my ( $args ) = @_;
    $args->{heap}->{pane}->cursor_viewport_bottom;
    }
  });

# }}}

# {{{ Normal-mode 'M'
insert_into_trie
  ({
  string => q{M},
  mode   => q{normal},
  sub    => sub
    {
    my ( $args ) = @_;
    $args->{heap}->{pane}->cursor_viewport_vertical_center;
    }
  });

# }}}

# N

# {{{ Normal-mode 'O'
insert_into_trie
  ({
  string => q{O},
  mode   => q{normal},
  sub    => sub
    {
    my ( $args ) = @_;
    my $pane     = $args->{heap}->{pane};

    set_mode({ heap => $args->{heap}, mode => q{insert} });
    $pane->insert_line;
    }
  });

# }}}

# P  Q  R  S  T  U  V  W
# X  Y  Z  [  \  ]

# {{{ Normal-mode '^'
insert_into_trie
  ({
  string => q{^},
  mode   => q{normal},
  sub    => sub
    {
    my ( $args ) = @_;
    $args->{heap}->{pane}->cursor_beginning_line;
    }
  });

# }}}

# _

# `

# {{{ Normal-mode 'a'
insert_into_trie
  ({
  string => q{a},
  mode   => q{normal},
  sub    => sub
    {
    my ( $args ) = @_;
    my $pane     = $args->{heap}->{pane};

    set_mode({ heap => $args->{heap}, mode => q{insert} });
    $pane->cursor_right;
    }
  });

# }}}

# b  c 

# {{{ trie 'dd'
insert_into_trie
  ({
  string => q{dd},
  mode   => q{normal},
  sub    => sub
    {
    my ( $args ) = @_;

    $args->{heap}->{pane}->delete_line;
    }
  });

# }}}

# {{{ trie 'dl'
insert_into_trie
  ({
  string => q{dl},
  mode   => q{normal},
  sub    => sub
    {
    my ( $args ) = @_;
    my $pane = $args->{heap}->{pane};

    $pane->delete_character;
    }
  });

# }}}

# {{{ trie 'dw'
insert_into_trie
  ({
  string => q{dw},
  mode   => q{normal},
  sub    => sub
    {
    my ( $args ) = @_;

    $args->{heap}->{pane}->delete_word;
    }
  });

# }}}

# e  f  g

# {{{ Normal-mode 'h', KEY_LEFT
insert_into_trie
  ({
  string => [ q{KEY_LEFT}, q{h} ],
  mode   => q{normal},
  sub    => sub
    {
    my ( $args ) = @_;
    $args->{heap}->{pane}->cursor_left;
    }
  });

# }}}

# {{{ Normal-mode 'i'
insert_into_trie
  ({
  string => q{i},
  mode   => q{normal},
  sub    => sub
    {
    my ( $args ) = @_;
    set_mode({ heap => $args->{heap}, mode => q{insert} });
    }
  });

# }}}

# {{{ Normal-mode 'j', '+', cr, KEY_DOWN, nl (\cJ)
insert_into_trie
  ({
  string => [ q{KEY_DOWN}, qq{\cM}, q{j}, q{+}, qq{\cJ}, qq{\ck} ],
  mode   => q{normal},
  sub    => sub
    {
    my ( $args ) = @_;
    $args->{heap}->{pane}->cursor_down;
    }
  });

# }}}

# {{{ Normal-mode 'k','-', KEY_UP, dle (\cP)
insert_into_trie
  ({
  string => [ q{KEY_UP}, q{-}, q{k}, qq{\cP} ],
  mode   => q{normal},
  sub    => sub
    {
    my ( $args ) = @_;
    $args->{heap}->{pane}->cursor_up;
    }
  });

# }}}

# {{{ Normal-mode 'l', ' ', KEY_RIGHT
insert_into_trie
  ({
  string => [ q{KEY_RIGHT},q{l},q{ } ],
  mode   => q{normal},
  sub    => sub
    {
    my ( $args ) = @_;
    $args->{heap}->{pane}->cursor_right;
    }
  });

# }}}

# m  n

# {{{ Normal-mode 'o'
insert_into_trie
  ({
  string => q{o},
  mode   => q{normal},
  sub    => sub
    {
    my ( $args ) = @_;
    my $pane     = $args->{heap}->{pane};

    set_mode({ heap => $args->{heap}, mode => q{insert} });
    $pane->insert_line;
    $pane->cursor_down;
    $pane->cursor_flush_left;
    }
  });

# }}}

# p  q  r  s  t

# {{{ Normal-mode 'u'
insert_into_trie
  ({
  string => q{u},
  mode   => q{normal},
  sub    => sub
    {
    my ( $args ) = @_;
    $args->{heap}->{pane}->undo;
    }
  });

# }}}

# {{{ Normal-mode 'v'
insert_into_trie
  ({
  string => q{v},
  mode   => q{normal},
  sub    => sub
    {
    my ( $args ) = @_;
    my $pane     = $args->{heap}->{pane};

    set_mode({ heap => $args->{heap}, mode => q{visual} });
    $pane->insert_line;
    $pane->cursor_down;
    }
  });

# }}}

# w

# {{{ Normal-mode 'x'
insert_into_trie
  ({
  string => q{x},
  mode   => q{normal},
  sub    => sub
    {
    my ( $args ) = @_;
    my $pane     = $args->{heap}->{pane};

    $pane->delete_character;
    #$pane->cursor_left; # Don't move the cursor in this case
    }
  });

# }}}

# y  z  {

# {{{ Normal-mode '|'
insert_into_trie
  ({
  string => q{|},
  mode   => q{normal},
  sub    => sub
    {
    my ( $args ) = @_;
    $args->{heap}->{pane}->cursor_flush_left;
    }
  });

# }}}

# }

# {{{ Normal-mode '~'
insert_into_trie
  ({
  string => q{~},
  mode   => q{normal},
  sub    => sub
    {
    my ( $args ) = @_;
    my $pane     = $args->{heap}->{pane};
 
    $pane->swap_case;
    $pane->cursor_right;
    }
  });

# }}}

# {{{ Normal-mode del, KEY_BACKSPACE
insert_into_trie
  ({
  string => q{KEY_BACKSPACE},
  mode   => q{normal},
  sub    => sub
    {
    my ( $args ) = @_;
    $args->{heap}->{pane}->cursor_left;
    }
  });

# }}}

# {{{ Normal-mode KEY_HOME
insert_into_trie
  ({
  string => q{KEY_HOME},
  mode   => q{normal},
  sub    => sub
    {
    my ( $args ) = @_;
    $args->{heap}->{pane}->cursor_flush_top;
    }
  });

# }}}

# }}}

# {{{ Insert keystrokes

# nul  soh  stx  etx  eot  enq  ack  bel
# bs   ht   nl   vt   np   cr   so   si
# dle  dc1  dc2  dc3  dc4  nak  syn  etb
# can  em   sub  

# {{{ Insert-mode '\e' (esc)
insert_into_trie
  ({
  string => qq{\e},
  mode   => q{insert},
  sub    => sub
    {
    my ( $args ) = @_;
    set_mode({ heap => $args->{heap}, mode => q{normal} });
    }
  });

# }}}

# fs   gs   rs   us

# {{{ Insert-mode [...]
insert_into_trie
  ({
  string =>
    [
    q{ }, q{!}, q{"}, q{#}, q{$},  q{%}, q{&}, q{'},
    q{(}, q{)}, q{*}, q{+}, q{,},  q{-}, q{.}, q{/},
    q{0}, q{1}, q{2}, q{3}, q{4},  q{5}, q{6}, q{7},
    q{8}, q{9}, q{:}, q{;}, q{<},  q{=}, q{>}, q{?},
    q{@}, q{A}, q{B}, q{C}, q{D},  q{E}, q{F}, q{G},
    q{H}, q{I}, q{J}, q{K}, q{L},  q{M}, q{N}, q{O},
    q{P}, q{Q}, q{R}, q{S}, q{T},  q{U}, q{V}, q{W},
    q{X}, q{Y}, q{Z}, q{[}, q{\\}, q{]}, q{^}, q{_},
    q{`}, q{a}, q{b}, q{c}, q{d},  q{e}, q{f}, q{g},
    q{h}, q{i}, q{j}, q{k}, q{l},  q{m}, q{n}, q{o},
    q{p}, q{q}, q{r}, q{s}, q{t},  q{u}, q{v}, q{w},
    q{x}, q{y}, q{z}, q({), q{|},  q(}), q{~},
    ],
  mode => q{insert},
  sub  => sub
    {
    my ( $args, $keystroke ) = @_;
    my $pane                 = $args->{heap}->{pane};
 
    $pane->insert_character({ keystroke => $keystroke });
    $pane->cursor_right;
    }
  });

# }}}

# {{{ Insert-mode del (KEY_BACKSPACE)
insert_into_trie
  ({
  string => q{KEY_BACKSPACE},
  mode   => q{insert},
  sub    => sub
    {
    my ( $args ) = @_;
    my $pane     = $args->{heap}->{pane};
 
    $pane->cursor_left;
    $pane->delete_character;
    }
  });

# }}}

# }}}

# {{{ Command keystrokes

# {{{ Command-mode del, KEY_BACKSPACE
insert_into_trie
  ({
  string => q{KEY_BACKSPACE},
  mode   => q{command},
  sub    => sub
    {
    my ( $args )     = @_;
    my $command_line = $args->{heap}->{command_line};

    $command_line->delete_character;
    $command_line->cursor_left;
    }
  });

# }}}

# nul  soh  stx  etx  eot  enq  ack  bel
# bs   ht   nl   vt   np

# {{{ Command-mode '\cM' (cr)
insert_into_trie
  ({
  string => qq{\cM},
  mode   => q{command},
  sub    => sub
    {
    my ( $args )     = @_;
    my $pane         = $args->{heap}->{pane};
    my $command_line = $args->{heap}->{command_line};
 
    set_mode({ heap => $args->{heap}, mode => q{normal} });

    my $command = $command_line->{content}[-1];
    $command_line->{content} = [''];

    if ( $command eq q{q} )
      {
      $args->{heap}->{quitting} = 1; # XXX Think about this...
      $args->{kernel}->yield(q{quit});
      }
    }
  });

# }}}

# so   si
# dle  dc1  dc2  dc3  dc4  nak  syn  etb
# can  em   sub

# {{{ Command-mode '\e' (esc)
insert_into_trie
  ({
  string => qq{\e},
  mode   => q{command},
  sub    => sub
    {
    my ( $args ) = @_;
    my $pane     = $args->{heap}->{pane};

    set_mode({ heap => $args->{heap}, mode => q{normal} });
    $pane->{content} = [''];
    }
  });

# }}}

# fs   gs   rs   us

# {{{ Command-mode [...]
insert_into_trie
  ({
  string =>
    [
    q{ }, q{!}, q{"}, q{#}, q{$},  q{%}, q{&}, q{'},
    q{(}, q{)}, q{*}, q{+}, q{,},  q{-}, q{.}, q{/},
    q{0}, q{1}, q{2}, q{3}, q{4},  q{5}, q{6}, q{7},
    q{8}, q{9}, q{:}, q{;}, q{<},  q{=}, q{>}, q{?},
    q{@}, q{A}, q{B}, q{C}, q{D},  q{E}, q{F}, q{G},
    q{H}, q{I}, q{J}, q{K}, q{L},  q{M}, q{N}, q{O},
    q{P}, q{Q}, q{R}, q{S}, q{T},  q{U}, q{V}, q{W},
    q{X}, q{Y}, q{Z}, q{[}, q{\\}, q{]}, q{^}, q{_},
    q{`}, q{a}, q{b}, q{c}, q{d},  q{e}, q{f}, q{g},
    q{h}, q{i}, q{j}, q{k}, q{l},  q{m}, q{n}, q{o},
    q{p}, q{q}, q{r}, q{s}, q{t},  q{u}, q{v}, q{w},
    q{x}, q{y}, q{z}, q({), q{|},  q(}), q{~},
    ],
  mode => q{command},
  sub  => sub
    {
    my ( $args, $keystroke ) = @_;
    my $heap                 = $args->{heap};
    my $command_line         = $heap->{command_line};

    $command_line->insert_character ({ keystroke => $keystroke });
    $command_line->cursor_right;
    }
  });

# }}}

# }}}

# {{{ Visual keystrokes

# nul soh stx etx eot enq ack bel
# bs  ht  nl  vt  np  cr  so  si
# dle dc1 dc2 dc3 dc4 nak syn etb
# can em  sub esc

# {{{ Visual-mode '\e' (esc)
insert_into_trie
  ({
  string => qq{\e},
  mode   => q{visual},
  sub    => sub
    {
    my ( $args ) = @_;
    set_mode({ heap => $args->{heap}, mode => q{visual} });
    }
  });

# }}}

# fs  gs  rs  us
# sp  !   "   #   $   %   &   '
# (   )   *   +   ,   -   .   /
# 0   1   2   3   4   5   6   7
# 8   9   :   ;   <   =   >   ?
# @   A   B   C   D   E   F   G
# H   I   J   K   L   M   N   O
# P   Q   R   S   T   U   V   W
# X   Y   Z   [   \   ]   ^   _
# `   a   b   c   d   e   f   g
# h   i   j   k   l   m   n   o
# p   q   r   s   t   u   v   w
# x   y   z   {   |   }   ~   del

# }}}

# }}}

# {{{ set_mode({ heap => $heap, mode => $mode })
sub set_mode
  {
  my ( $args ) = @_;
  my $heap     = $args->{heap};
  my $mode     = $args->{mode};
  croak "Attempt to set illegal mode '$mode'\n"
      unless grep { /$mode/ } @legal_modes;

  $heap->{pane}->set_mode({ mode => $mode });
  $heap->{command_line}->set_mode({ mode => $mode });
  }

# }}}

# {{{ State({ name => $name, sub => $sub })
sub State
  {
  my ( $args ) = @_;
  my $name     = $args->{name};
  my $sub      = $args->{sub};

  $inline_state{$name} = sub
    {
    $sub->
      ({
      kernel => $_[KERNEL],
      heap   => $_[HEAP],
      args   => [ @_[ ARG0 .. $#_ ] ],
      });
    };
  }

# }}}

# {{{ get_lines({ filename => $filename })
sub get_lines
  {
  my ( $args ) = @_;
  my $filename = $args->{filename};
  my $lines    = [];

  die qq{No filename specified.\n} unless $filename;

  die qq{Could not find file '$filename'.\n} unless -e $filename;
  die qq{'$filename' is not a file.\n} unless -f $filename;
  
  open my $fh, '<:utf8', $filename or die qq{Could not open '$filename'};
  @$lines = map { chomp; $_ } <$fh>;
  close $fh;
  return $lines;
  }

# }}}

# {{{ Event handlers

# {{{ console_initialize
#
# Initialize the console interface.
#
State
  ({
  name => q{_start},
  sub  => sub 
    {
    my ( $args ) = @_;
    my $kernel   = $args->{kernel};
    my $heap     = $args->{heap};
    my $filename = $args->{args}[0];

    $heap->{curses} = POE::Wheel::Curses->new( InputEvent => q{got_input} );

    my $file       = get_lines({ filename => $filename });
    my $pane_width = max( map { length($_) } @$file );

    my $packer = Packer->new({
      top => 0,
      height => $Curses::LINES
    });

    $packer->add({ height => 2 }); # Bogus pane, not connected at all
    $packer->add({ height => 'stretchy' });
    $packer->add({ height => 1 });
    $packer->add({ height => 1 });

    my @panes = $packer->finalize();

# {{{ Create scrolling pane
    $heap->{pane} = Pane::Edit->new
      ({
      pane_height     => scalar(@$file),
      pane_width      => $pane_width,
      #viewport_width  => $Curses::COLS,
      #viewport_width  => $Curses::COLS - 1,
      viewport_width  => $Curses::COLS - 2,
      content         => $file,

      %{$panes[1]}, # Viewport height/top

#      viewport_left   => 0,
      viewport_left   => 1,
      });

# }}}

# {{{ Create Status pane
    $heap->{status_line} = Pane::StatusLine->new
      ({
      pane_height     => 1,
      pane_width      => $Curses::COLS,
      viewport_width  => $Curses::COLS,

      %{$panes[2]}, # Viewport height/top

      file_name       => $filename,
      });

# }}}

# {{{ Create command pane
    $heap->{command_line} = Pane::CommandLine->new
      ({
      pane_height     => 1,
      pane_width      => $Curses::COLS,
      viewport_width  => $Curses::COLS,

      %{$panes[3]}, # Viewport height/top
      });

# }}}

    $kernel->yield(q{update});
    }
  });

# }}}

# {{{ curses_refresh
#
# Refresh the entire screen
#
State
  ({
  name => q{update},
  sub  => sub
    {
    my ( $args )     = @_;
    my $heap         = $args->{heap};
    my $pane         = $heap->{pane};
    my $status_line  = $heap->{status_line};
    my $command_line = $heap->{command_line};
 
    $pane->update;
    $command_line->update;
    $status_line->update;

# {{{ Update cursor properly-focused
    if ( $heap->{command_line}{mode} eq 'command' )
      {
      $command_line->update_cursor;
      }
    else
      {
      $pane->update_cursor;
      }

# }}}

    noutrefresh;
    doupdate;
    }
  });

# }}}

# {{{ console_quit
#
# Print the closing text
# Destroy the heap items we allocated
#
State
  ({
  name => q{quit},
  sub  => sub
    {
    my ( $args ) = @_;
    my $kernel   = $args->{kernel};
    my $heap     = $args->{heap};
    my $row      = $Curses::LINES - 2;
 
    move( $row++, 0 ); clrtoeol; addstr(qq{Editor has quit.});
    move( $row++, 0 ); clrtoeol;
    noutrefresh;
    doupdate;
 
    $kernel->alias_remove(q{console});
    $kernel->alarm_remove_all;
    delete $heap->{curses};
    }
  });

# }}}

# {{{ curses_input
#
# Perform editor actions for keystrokes
#
State
  ({
  name => q{got_input},
  sub  => sub
    {
    my ( $args )  = @_;
    my $kernel    = $args->{kernel};
    my $heap      = $args->{heap};
    my $keystroke = $args->{args}[0];
    my $mode      = $heap->{command_line}{mode};

    $keystroke = uc( keyname($keystroke) ) if
      $keystroke =~ m{ ^ \d{2,} $ }mx;

    my $repeat_count = $heap->{repeat_count} || 1;
    my $tref         = $editor_trie{$mode};

    if ( $heap->{editor_trie_buffer} )
      {
# {{{ Handle multi-character commands... Yipes.
      my @char = split //, $heap->{editor_trie_buffer};

# {{{ Slide down the trie
      while ( @char > 1 )
        {
        my $char = shift @char;
        if ( $tref->{$char} )
          {
          $tref = $tref->{$char};
          }
        else
          {
          beep;
          delete $heap->{editor_trie_buffer};
          return;
          }
        }

# }}}

# {{{ Try to match starting with the first character...
      if ( $tref->{$char[0]}{$keystroke} )
        {
        if ( ref($tref->{$char[0]}{$keystroke}) eq 'CODE' )
          {
          my $cmd  = $heap->{editor_trie_buffer} . $keystroke;
          my $func = $tref->{$char[0]}{$keystroke};
          for ( 1 .. $repeat_count )
            {
            $func->($args,$cmd);
            }
          delete $heap->{repeat_count};
          delete $heap->{editor_trie_buffer};
          }
        else
          {
          $heap->{editor_trie_buffer} .= $keystroke;
          }
        }
      else
        {
        beep;
        delete $heap->{editor_trie_buffer};
        return;
        }

# }}}

# }}}
      }
    else
      {
# {{{ Single-character command
      if ( exists $tref->{$keystroke} )
        {
        if ( ref($tref->{$keystroke}) eq 'HASH' )
          {
          $heap->{editor_trie_buffer} = $keystroke;
          }
        else
          {
          my $func = $tref->{$keystroke};
          if ( $keystroke =~ m{ [1-9] }mx )
            {
            $func->($args,$keystroke);
            }
          else
            {
            for ( 1 .. $repeat_count )
              {
              $func->($args,$keystroke);
              }
            $heap->{repeat_count} = undef;
            }
          }
        }
      else 
        {
        beep;
        delete $heap->{editor_trie_buffer};
        return;
        }
# }}}
      }

    $kernel->yield(q{update}) unless $args->{heap}->{quitting};
    }
  });

# }}}

# }}}

POE::Session->create
  (
  args          => [ $ARGV[0] ],
  inline_states => { %inline_state },
  );
POE::Kernel->run;
exit 0;
