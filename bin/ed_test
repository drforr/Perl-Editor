#!/usr/bin/perl

use warnings;
use strict;
use Carp qw(croak);
use Readonly;

use FindBin qw($Bin);
use lib qq{$Bin/../lib};
use Curses;
use POE;
use POE::Wheel::Curses;

use Pane;
use Pane::Edit;

#
# Available modes:
#
# Normal
# Visual
# Insert
# Command-line
#
my %editor_key;
my %inline_state;

# {{{ Keystroke({ trie => $trie, type => $type, sub => $sub })
sub Keystroke
  {
  my ( $args ) = @_;
  my $trie     = $args->{trie};
  my $type     = $args->{type};

  $trie = [ $trie ] unless ref $trie;

  for my $key ( @$trie )
    {
    $editor_key{$type}{$key} = $args->{sub};
    }
  }

# }}}

# {{{ State({ name => $name, sub => $sub })
sub State
  {
  my ( $args ) = @_;
  my $name     = $args->{name};
  my $sub      = $args->{sub};

  $inline_state{$name} = sub
    {
    $sub->
      ({
      kernel => $_[KERNEL],
      heap   => $_[HEAP],
      args   => [ @_[ ARG0 .. $#_ ] ],
      });
    };
  }

# }}}

# {{{ Normal keystrokes

# {{{ Normal KEY_BACKSPACE
Keystroke
  ({
  trie => q{KEY_BACKSPACE},
  type => q{normal},
  sub => sub
    {
    my ( $args ) = @_;
    my $pane     = $args->{heap}->{pane};

    $pane->cursor_left;
    $pane->update;
    }
  });

# }}}

# {{{ Normal KEY_HOME
Keystroke
  ({
  trie => q{KEY_HOME},
  type => q{normal},
  sub => sub
    {
    my ( $args ) = @_;
    my $pane     = $args->{heap}->{pane};
 
    $pane->cursor_flush_top();
    $pane->update;
    }
  });

# }}}

# nul

# soh

# stx

# etx

# eot

# enq

# ack

# bel

# bs

# ht

# nl

# vt

# {{{ Normal '\cL' (np)
Keystroke
  ({
  trie => qq{\cL},
  type => q{normal},
  sub => sub
    {
    my ( $args ) = @_;
    my $kernel   = $args->{kernel};
 
    $kernel->yield(q{update});
    }
  });

# }}}

# cr

# so

# si

# dle

# dc1

# dc2

# dc3

# dc4

# nak

# syn

# etb

# can

# em

# sub

# esc

# fs

# gs

# rs

# us

# ' '

# !

# "

# #

# {{{ Normal '$', KEY_EOL
Keystroke
  ({
  trie => [q{KEY_EOL},q{$}],
  type => q{normal},
  sub => sub
    {
    my ( $args ) = @_;
    my $pane     = $args->{heap}->{pane};
 
    $pane->cursor_flush_right();
    $pane->update;
    }
  });

# }}}

# %

# &

# '

# (

# )

# *

# +

# ,

# -

# .

# /

# {{{ Normal KEY_BEG, '0'
Keystroke
  ({
  trie => [q{KEY_BEG},q{0}],
  type => q{normal},
  sub => sub
    {
    my ( $args ) = @_;
    my $pane     = $args->{heap}->{pane};
 
    $pane->cursor_flush_left();
    $pane->update;
    }
  });

# }}}

# 1-9

# :

# ;

# <

# =

# >

# ?

# @

# {{{ Normal 'a'
Keystroke
  ({
  trie => q{a},
  type => q{normal},
  sub => sub
    {
    my ( $args ) = @_;
    my $pane     = $args->{heap}->{pane};
 
    $pane->set_mode({ mode => q{insert} });
    $pane->cursor_right;
    $pane->update;
    }
  });

# }}}

# {{{ Normal 'A'
Keystroke
  ({
  trie => q{A},
  type => q{normal},
  sub => sub
    {
    my ( $args ) = @_;
    my $pane     = $args->{heap}->{pane};
 
    $pane->set_mode({ mode => q{insert} });
    $pane->cursor_flush_right;
    $pane->update;
    }
  });

# }}}

# b

# B

# c

# C

# d

# D

# e

# E

# f

# F

# g

# {{{ Normal 'G', KEY_END
Keystroke
  ({
  trie => [q{KEY_END}, q{G}],
  type => q{normal},
  sub => sub
    {
    my ( $args ) = @_;
    my $pane     = $args->{heap}->{pane};
 
    $pane->cursor_flush_bottom();
    $pane->update;
    }
  });

# }}}

# {{{ Normal 'h', KEY_LEFT
Keystroke
  ({
  trie => [q{KEY_LEFT},q{h}],
  type => q{normal},
  sub => sub
    {
    my ( $args ) = @_;
    my $pane     = $args->{heap}->{pane};

    $pane->cursor_left();
    $pane->update;
    }
  });

# }}}

# {{{ Normal 'H'
Keystroke
  ({
  trie => q{H},
  type => q{normal},
  sub => sub
    {
    my ( $args ) = @_;
    my $pane     = $args->{heap}->{pane};
 
    $pane->cursor_viewport_top;
    $pane->update;
    }
  });

# }}}

# {{{ Normal 'i'
Keystroke
  ({
  trie => q{i},
  type => q{normal},
  sub => sub
    {
    my ( $args ) = @_;
    my $pane     = $args->{heap}->{pane};
 
    $pane->set_mode({ mode => q{insert} });
    $pane->update;
    }
  });

# }}}

# {{{ Normal 'I'
Keystroke
  ({
  trie => q{I},
  type => q{normal},
  sub => sub
    {
    my ( $args ) = @_;
    my $pane     = $args->{heap}->{pane};
 
    $pane->set_mode({ mode => q{insert} });
    $pane->cursor_flush_left;
    $pane->update;
    }
  });

# }}}

# {{{ Normal 'j', KEY_DOWN
Keystroke
  ({
  trie => [q{KEY_DOWN}, q{j}],
  type => q{normal},
  sub => sub
    {
    my ( $args ) = @_;
    my $pane     = $args->{heap}->{pane};
 
    $pane->cursor_down();
    $pane->update;
    }
  });

# }}}

# J

# {{{ Normal 'k', KEY_UP
Keystroke
  ({
  trie => [q{KEY_UP}, q{k}],
  type => q{normal},
  sub => sub
    {
    my ( $args ) = @_;
    my $pane     = $args->{heap}->{pane};
 
    $pane->cursor_up();
    $pane->update;
    }
  });

# }}}

# K

# {{{ Normal 'l', ' ', KEY_RIGHT
Keystroke
  ({
  trie => [q{KEY_RIGHT},q{l},q{ }],
  type => q{normal},
  sub => sub
    {
    my ( $args ) = @_;
    my $pane     = $args->{heap}->{pane};
 
    $pane->cursor_right();
    $pane->update;
    }
  });

# }}}

# {{{ Normal 'L'
Keystroke
  ({
  trie => q{L},
  type => q{normal},
  sub => sub
    {
    my ( $args ) = @_;
    my $pane     = $args->{heap}->{pane};
 
    $pane->cursor_viewport_bottom;
    $pane->update;
    }
  });

# }}}

# m

# {{{ Normal 'M'
Keystroke
  ({
  trie => q{M},
  type => q{normal},
  sub => sub
    {
    my ( $args ) = @_;
    my $pane     = $args->{heap}->{pane};
 
    $pane->cursor_viewport_vertical_center;
    $pane->update;
    }
  });

# }}}

# n

# N

# {{{ Normal 'o'
Keystroke
  ({
  trie => q{o},
  type => q{normal},
  sub => sub
    {
    my ( $args ) = @_;
    my $pane     = $args->{heap}->{pane};
 
    $pane->set_mode({ mode => q{insert} });
    $pane->insert_line;
    $pane->cursor_down;
    $pane->update;
    }
  });

# }}}

# {{{ Normal 'O'
Keystroke
  ({
  trie => q{O},
  type => q{normal},
  sub => sub
    {
    my ( $args ) = @_;
    my $pane     = $args->{heap}->{pane};
    
    $pane->set_mode({ mode => q{insert} });
    $pane->insert_line;
    $pane->update;
    }
  });

# }}}

# p

# P

#
# Should be ':q'...
#
# {{{ Normal 'q'
Keystroke
  ({
  trie => q{q},
  type => q{normal},
  sub => sub
    {
    my ( $args ) = @_;
    my $kernel   = $args->{kernel};

    $kernel->yield(q{quit});
    }
  });

# }}}

# Q

# r

# R

# s

# S

# t

# T

# {{{ Normal 'u'
Keystroke
  ({
  trie => q{u},
  type => q{normal},
  sub => sub
    {
    my ( $args ) = @_;
    my $pane     = $args->{heap}->{pane};
 
    $pane->undo;
    $pane->update;
    }
  });

# }}}

# U

# v

# V

# w

# W

# {{{ Normal 'x'
Keystroke
  ({
  trie => q{x},
  type => q{normal},
  sub => sub
    {
    my ( $args ) = @_;
    my $pane     = $args->{heap}->{pane};

    $pane->delete;
    $pane->update;
    }
  });

# }}}

# X

# y

# Y

# z

# Z

# [

# \

# ]

# ^

# _

# `

# {

# |

# }

# ~

# }}}

# {{{ Insert keystrokes

# {{{ Insert [...]
Keystroke
  ({
  trie =>
    [
    q{a}..q{z},
    q{A}..q{Z},
    q{0}..q{9},
    q{ },
    q{#},
    q{,},
    qw( ( [ { ` ~ ! @ $ % ^ & * - _ = + | ; : ' " < . > \ / ? } ] ) )
    ],
  type => q{insert},
  sub => sub
    {
    my ( $args, $keystroke ) = @_;
    my $pane                 = $args->{heap}->{pane};
 
    $pane->insert({ keystroke => $keystroke });
    $pane->cursor_right;
    $pane->update;
    }
  });

# }}}

# {{{ Insert KEY_BACKSPACE
Keystroke
  ({
  trie => q{KEY_BACKSPACE},
  type => q{insert},
  sub => sub
    {
    my ( $args ) = @_;
    my $pane     = $args->{heap}->{pane};
 
    $pane->cursor_left;
    $pane->delete;
    $pane->update;
    }
  });

# }}}

# nul

# soh

# stx

# etx

# eot

# enq

# ack

# bel

# bs

# ht

# nl

# vt

# {{{ Normal '\cL' (np)
Keystroke
  ({
  trie => qq{\cL},
  type => q{normal},
  sub => sub
    {
    my ( $args ) = @_;
    my $kernel   = $args->{kernel};
 
    $kernel->yield(q{update});
    }
  });

# }}}

# cr

# so

# si

# dle

# dc1

# dc2

# dc3

# dc4

# nak

# syn

# etb

# can

# em

# sub

# {{{ Insert '\e' (esc)
Keystroke
  ({
  trie => qq{\e},
  type => q{insert},
  sub => sub
    {
    my ( $args ) = @_;
    my $pane     = $args->{heap}->{pane};
 
    $pane->set_mode({ mode => q{normal} });
    $pane->update;
    }
  });

# }}}

# fs

# gs

# rs

# us

# ' '

# !

# "

# #

# {{{ Normal '$', KEY_EOL
Keystroke
  ({
  trie => [q{KEY_EOL},q{$}],
  type => q{normal},
  sub => sub
    {
    my ( $args ) = @_;
    my $pane     = $args->{heap}->{pane};
 
    $pane->cursor_flush_right();
    $pane->update;
    }
  });

# }}}

# %

# &

# '

# (

# )

# *

# +

# ,

# -

# .

# /

# {{{ Normal KEY_BEG, '0'
Keystroke
  ({
  trie => [q{KEY_BEG},q{0}],
  type => q{normal},
  sub => sub
    {
    my ( $args ) = @_;
    my $pane     = $args->{heap}->{pane};
 
    $pane->cursor_flush_left();
    $pane->update;
    }
  });

# }}}

# 1-9

# :

# ;

# <

# =

# >

# ?

# @

# {{{ Normal 'a'
Keystroke
  ({
  trie => q{a},
  type => q{normal},
  sub => sub
    {
    my ( $args ) = @_;
    my $pane     = $args->{heap}->{pane};
 
    $pane->set_mode({ mode => q{insert} });
    $pane->cursor_right;
    $pane->update;
    }
  });

# }}}

# {{{ Normal 'A'
Keystroke
  ({
  trie => q{A},
  type => q{normal},
  sub => sub
    {
    my ( $args ) = @_;
    my $pane     = $args->{heap}->{pane};
 
    $pane->set_mode({ mode => q{insert} });
    $pane->cursor_flush_right;
    $pane->update;
    }
  });

# }}}

# b

# B

# c

# C

# d

# D

# e

# E

# f

# F

# g

# {{{ Normal 'G', KEY_END
Keystroke
  ({
  trie => [q{KEY_END}, q{G}],
  type => q{normal},
  sub => sub
    {
    my ( $args ) = @_;
    my $pane     = $args->{heap}->{pane};
 
    $pane->cursor_flush_bottom();
    $pane->update;
    }
  });

# }}}

# {{{ Normal 'h', KEY_LEFT
Keystroke
  ({
  trie => [q{KEY_LEFT},q{h}],
  type => q{normal},
  sub => sub
    {
    my ( $args ) = @_;
    my $pane     = $args->{heap}->{pane};

    $pane->cursor_left();
    $pane->update;
    }
  });

# }}}

# {{{ Normal 'H'
Keystroke
  ({
  trie => q{H},
  type => q{normal},
  sub => sub
    {
    my ( $args ) = @_;
    my $pane     = $args->{heap}->{pane};
 
    $pane->cursor_viewport_top;
    $pane->update;
    }
  });

# }}}

# {{{ Normal 'i'
Keystroke
  ({
  trie => q{i},
  type => q{normal},
  sub => sub
    {
    my ( $args ) = @_;
    my $pane     = $args->{heap}->{pane};
 
    $pane->set_mode({ mode => q{insert} });
    $pane->update;
    }
  });

# }}}

# {{{ Normal 'I'
Keystroke
  ({
  trie => q{I},
  type => q{normal},
  sub => sub
    {
    my ( $args ) = @_;
    my $pane     = $args->{heap}->{pane};
 
    $pane->set_mode({ mode => q{insert} });
    $pane->cursor_flush_left;
    $pane->update;
    }
  });

# }}}

# {{{ Normal 'j', KEY_DOWN
Keystroke
  ({
  trie => [q{KEY_DOWN}, q{j}],
  type => q{normal},
  sub => sub
    {
    my ( $args ) = @_;
    my $pane     = $args->{heap}->{pane};
 
    $pane->cursor_down();
    $pane->update;
    }
  });

# }}}

# J

# {{{ Normal 'k', KEY_UP
Keystroke
  ({
  trie => [q{KEY_UP}, q{k}],
  type => q{normal},
  sub => sub
    {
    my ( $args ) = @_;
    my $pane     = $args->{heap}->{pane};
 
    $pane->cursor_up();
    $pane->update;
    }
  });

# }}}

# K

# {{{ Normal 'l', ' ', KEY_RIGHT
Keystroke
  ({
  trie => [q{KEY_RIGHT},q{l},q{ }],
  type => q{normal},
  sub => sub
    {
    my ( $args ) = @_;
    my $pane     = $args->{heap}->{pane};
 
    $pane->cursor_right();
    $pane->update;
    }
  });

# }}}

# {{{ Normal 'L'
Keystroke
  ({
  trie => q{L},
  type => q{normal},
  sub => sub
    {
    my ( $args ) = @_;
    my $pane     = $args->{heap}->{pane};
 
    $pane->cursor_viewport_bottom;
    $pane->update;
    }
  });

# }}}

# m

# {{{ Normal 'M'
Keystroke
  ({
  trie => q{M},
  type => q{normal},
  sub => sub
    {
    my ( $args ) = @_;
    my $pane     = $args->{heap}->{pane};
 
    $pane->cursor_viewport_vertical_center;
    $pane->update;
    }
  });

# }}}

# n

# N

# {{{ Normal 'o'
Keystroke
  ({
  trie => q{o},
  type => q{normal},
  sub => sub
    {
    my ( $args ) = @_;
    my $pane     = $args->{heap}->{pane};
 
    $pane->set_mode({ mode => q{insert} });
    $pane->insert_line;
    $pane->cursor_down;
    $pane->update;
    }
  });

# }}}

# {{{ Normal 'O'
Keystroke
  ({
  trie => q{O},
  type => q{normal},
  sub => sub
    {
    my ( $args ) = @_;
    my $pane     = $args->{heap}->{pane};
    
    $pane->set_mode({ mode => q{insert} });
    $pane->insert_line;
    $pane->update;
    }
  });

# }}}

# p

# P

#
# Should be ':q'...
#
# {{{ Normal 'q'
Keystroke
  ({
  trie => q{q},
  type => q{normal},
  sub => sub
    {
    my ( $args ) = @_;
    my $kernel   = $args->{kernel};

    $kernel->yield(q{quit});
    }
  });

# }}}

# Q

# r

# R

# s

# S

# t

# T

# {{{ Normal 'u'
Keystroke
  ({
  trie => q{u},
  type => q{normal},
  sub => sub
    {
    my ( $args ) = @_;
    my $pane     = $args->{heap}->{pane};
 
    $pane->undo;
    $pane->update;
    }
  });

# }}}

# U

# v

# V

# w

# W

# {{{ Normal 'x'
Keystroke
  ({
  trie => q{x},
  type => q{normal},
  sub => sub
    {
    my ( $args ) = @_;
    my $pane     = $args->{heap}->{pane};

    $pane->delete;
    $pane->update;
    }
  });

# }}}

# X

# y

# Y

# z

# Z

# [

# \

# ]

# ^

# _

# `

# {

# |

# }

# ~

# }}}

# {{{ get_lines({ filename => $filename })
sub get_lines
  {
  my ( $args ) = @_;
  my $filename = $args->{filename};
  my $lines    = [];

  croak qq{Could not find file '$filename'.} unless -e $filename;
  croak qq{'$filename' is not a file.} unless -f $filename;
  
  open my $fh, $filename or die qq{Could not open '$filename'};
  @$lines = map { chomp; $_ } <$fh>;
  close $fh;
  return $lines;
  }

# }}}

# {{{ Event handlers

# {{{ console_initialize
#
# Initialize the console interface.
#
State
  ({
  name => q{_start},
  sub  => sub 
    {
    my ( $args ) = @_;
    my $kernel   = $args->{kernel};
    my $heap     = $args->{heap};
    my $filename = $args->{args}[0];

    $heap->{curses} = POE::Wheel::Curses->new( InputEvent => q{got_input} );

# {{{ Collect the longest string
    my $file       = get_lines({ filename => $filename });
    my $pane_width = length($file->[0]);
    for my $line_len ( map { length($_) } @$file )
      {
      $pane_width = $line_len if $line_len > $pane_width;
      }

# }}}

# {{{ Create scrolling pane
    $heap->{pane} = Pane::Edit->new
      ({
      pane_height     => scalar(@$file),
      viewport_height => $Curses::LINES - 1,
      pane_width      => $pane_width,
      viewport_width  => $Curses::COLS,
      content         => $file,
      });

# }}}

    $kernel->yield(q{update});
    }
  });

# }}}

# {{{ curses_refresh
#
# Refresh the entire screen
#
State
  ({
  name => q{update},
  sub  => sub
    {
    my ( $args ) = @_;
    my $pane     = $args->{heap}->{pane};
 
    $pane->update;
    }
  });

# }}}

# {{{ console_quit
#
# Print the closing text
# Destroy the heap items we allocated
#
State
  ({
  name => q{quit},
  sub  => sub
    {
    my ( $args ) = @_;
    my $kernel   = $args->{kernel};
    my $heap     = $args->{heap};
    my $row      = $Curses::LINES - 2;
 
    move( $row++, 0 ); clrtoeol(); addstr(qq{Editor has quit.});
    move( $row++, 0 ); clrtoeol();
    noutrefresh();
    doupdate;
 
    $kernel->alias_remove(q{console});
    $kernel->alarm_remove_all();
    delete $heap->{curses};
    }
  });

# }}}

# {{{ curses_input
#
# Perform editor actions for keystrokes
#
State
  ({
  name => q{got_input},
  sub  => sub
    {
    my ( $args )  = @_;
    my $keystroke = $args->{args}[0];
    my $mode      = $args->{heap}{pane}{mode};

    $keystroke = uc( keyname($keystroke) ) if
      $keystroke =~ m{ ^ \d{2,} $ }x;

    for my $ed_mode ( $mode, q{default} )
      {
      next unless $editor_key{$ed_mode}{$keystroke};
      $editor_key{$ed_mode}{$keystroke}->($args,$keystroke);
      last;
      }
    }
  });

# }}}

# }}}

POE::Session->create
  (
  args          => [ $ARGV[0] ],
  inline_states => { %inline_state },
  );
POE::Kernel->run();
exit 0;
